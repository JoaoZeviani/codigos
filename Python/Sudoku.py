rows=9
columns=9

sudoku=[]
for i in range(rows):
    a=[x for x in input().split()]
    sudoku.append(a)


def matrixtest(matrix):
#    errors=[]
    g=range(len(matrix))
    errorsf=[]
    for i in g:
        for j in g:
            for k in g:
                for l in g:
                    if [i,j] != [k,l]:
                        if i==k or j==l or (i//3==k//3 and j//3==l//3):
                            if matrix[i][j]==matrix[k][l] and matrix[i][j]!= "_":
#                                if ([[k,l],[i,j]]) not in errors:
#                                    errors.append([[i,j],[k,l]])
                                if [i,j] not in errorsf:
                                    errorsf.append ([i,j])
                                if [k,l] not in errorsf:
                                    errorsf.append ([k,l])

                             
    return errorsf; #da a linha e a coluna dos erros
        
fails=matrixtest(sudoku)

matrixsudoku=[
['+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ','|'],
['|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|',' ','+','-','-','-','-','-','+','-','-','-','-','-','+','-','-','-','-','-','+',' ','|'],
['+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+']]

def ku(matrixin,matrixout,rowinindex,rowoutindex,t):
    matrixout[rowoutindex][5+t]=matrixin[rowinindex][0]
    matrixout[rowoutindex][11+t]=matrixin[rowinindex][1]
    matrixout[rowoutindex][17+t]=matrixin[rowinindex][2]
    matrixout[rowoutindex][27+t]=matrixin[rowinindex][3]
    matrixout[rowoutindex][33+t]=matrixin[rowinindex][4]
    matrixout[rowoutindex][39+t]=matrixin[rowinindex][5]
    matrixout[rowoutindex][49+t]=matrixin[rowinindex][6]
    matrixout[rowoutindex][55+t]=matrixin[rowinindex][7]
    matrixout[rowoutindex][61+t]=matrixin[rowinindex][8]  
    return matrixout

matrixsudoku=ku(sudoku,matrixsudoku,0,2,0)
matrixsudoku=ku(sudoku,matrixsudoku,1,4,0)
matrixsudoku=ku(sudoku,matrixsudoku,2,6,0)
matrixsudoku=ku(sudoku,matrixsudoku,3,10,0)
matrixsudoku=ku(sudoku,matrixsudoku,4,12,0)
matrixsudoku=ku(sudoku,matrixsudoku,5,14,0)
matrixsudoku=ku(sudoku,matrixsudoku,6,18,0)
matrixsudoku=ku(sudoku,matrixsudoku,7,20,0)
matrixsudoku=ku(sudoku,matrixsudoku,8,22,0)

errormatrix=[[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' '],[' ',' ',' ',' ',' ',' ',' ',' ',' ']]
    
for i in range(len(fails)):
    r=fails[i][0]
    c=fails[i][1]
    errormatrix[r][c]='*'
    

matrixsudoku=ku(errormatrix,matrixsudoku,0,2,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,1,4,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,2,6,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,3,10,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,4,12,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,5,14,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,6,18,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,7,20,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,8,22,-1)
matrixsudoku=ku(errormatrix,matrixsudoku,0,2,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,1,4,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,2,6,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,3,10,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,4,12,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,5,14,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,6,18,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,7,20,+1)
matrixsudoku=ku(errormatrix,matrixsudoku,8,22,+1)
    
    
#for i in range(len(errormatrix)):
#    print(errormatrix[i])   
#for i in range(len(sudoku)):
#    print(sudoku[i])
#for i in range(len(fails)):
#    print(fails[i])
for x in matrixsudoku:
    print(*x, sep="")
    
